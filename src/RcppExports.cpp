// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// one
int one();
RcppExport SEXP _pRoxgrad_one() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(one());
    return rcpp_result_gen;
END_RCPP
}
// signC
int signC(int x);
RcppExport SEXP _pRoxgrad_signC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(signC(x));
    return rcpp_result_gen;
END_RCPP
}
// sumC
double sumC(NumericVector x);
RcppExport SEXP _pRoxgrad_sumC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sumC(x));
    return rcpp_result_gen;
END_RCPP
}
// meanC
double meanC(NumericVector x);
RcppExport SEXP _pRoxgrad_meanC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(meanC(x));
    return rcpp_result_gen;
END_RCPP
}
// getEigenValues
arma::vec getEigenValues(arma::mat M);
RcppExport SEXP _pRoxgrad_getEigenValues(SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(getEigenValues(M));
    return rcpp_result_gen;
END_RCPP
}
// shrink_groupcpp
arma::mat shrink_groupcpp(arma::mat C, arma::mat g_idx);
RcppExport SEXP _pRoxgrad_shrink_groupcpp(SEXP CSEXP, SEXP g_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type g_idx(g_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(shrink_groupcpp(C, g_idx));
    return rcpp_result_gen;
END_RCPP
}
// cal2normcpp
double cal2normcpp(arma::mat A, arma::mat g_idx);
RcppExport SEXP _pRoxgrad_cal2normcpp(SEXP ASEXP, SEXP g_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type g_idx(g_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cal2normcpp(A, g_idx));
    return rcpp_result_gen;
END_RCPP
}
// soft_thresholding
arma::vec soft_thresholding(arma::vec v, double lambdaL);
RcppExport SEXP _pRoxgrad_soft_thresholding(SEXP vSEXP, SEXP lambdaLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaL(lambdaLSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_thresholding(v, lambdaL));
    return rcpp_result_gen;
END_RCPP
}
// SPGcpp
List SPGcpp(arma::mat X, arma::mat Y, int J, double gamma, double lambda, double Cnorm, double mu, arma::sp_mat C, arma::vec w, arma::mat g_idx, double theta, arma::vec beta, int maxiter, int display_iter, int N, double tol);
RcppExport SEXP _pRoxgrad_SPGcpp(SEXP XSEXP, SEXP YSEXP, SEXP JSEXP, SEXP gammaSEXP, SEXP lambdaSEXP, SEXP CnormSEXP, SEXP muSEXP, SEXP CSEXP, SEXP wSEXP, SEXP g_idxSEXP, SEXP thetaSEXP, SEXP betaSEXP, SEXP maxiterSEXP, SEXP display_iterSEXP, SEXP NSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type Cnorm(CnormSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type C(CSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type g_idx(g_idxSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type display_iter(display_iterSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(SPGcpp(X, Y, J, gamma, lambda, Cnorm, mu, C, w, g_idx, theta, beta, maxiter, display_iter, N, tol));
    return rcpp_result_gen;
END_RCPP
}
// cal2normcpp
double cal2normcpp(arma::sp_mat A, NumericMatrix g_idx);
RcppExport SEXP _pRoxgrad_cal2normcpp(SEXP ASEXP, SEXP g_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type g_idx(g_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(cal2normcpp(A, g_idx));
    return rcpp_result_gen;
END_RCPP
}
// soft_thresholding
NumericVector soft_thresholding(NumericVector v, double lambdaL);
RcppExport SEXP _pRoxgrad_soft_thresholding(SEXP vSEXP, SEXP lambdaLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaL(lambdaLSEXP);
    rcpp_result_gen = Rcpp::wrap(soft_thresholding(v, lambdaL));
    return rcpp_result_gen;
END_RCPP
}
// timesTwo
NumericVector timesTwo(NumericVector x);
RcppExport SEXP _pRoxgrad_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pRoxgrad_one", (DL_FUNC) &_pRoxgrad_one, 0},
    {"_pRoxgrad_signC", (DL_FUNC) &_pRoxgrad_signC, 1},
    {"_pRoxgrad_sumC", (DL_FUNC) &_pRoxgrad_sumC, 1},
    {"_pRoxgrad_meanC", (DL_FUNC) &_pRoxgrad_meanC, 1},
    {"_pRoxgrad_getEigenValues", (DL_FUNC) &_pRoxgrad_getEigenValues, 1},
    {"_pRoxgrad_shrink_groupcpp", (DL_FUNC) &_pRoxgrad_shrink_groupcpp, 2},
    {"_pRoxgrad_cal2normcpp", (DL_FUNC) &_pRoxgrad_cal2normcpp, 2},
    {"_pRoxgrad_soft_thresholding", (DL_FUNC) &_pRoxgrad_soft_thresholding, 2},
    {"_pRoxgrad_SPGcpp", (DL_FUNC) &_pRoxgrad_SPGcpp, 16},
    {"_pRoxgrad_cal2normcpp", (DL_FUNC) &_pRoxgrad_cal2normcpp, 2},
    {"_pRoxgrad_soft_thresholding", (DL_FUNC) &_pRoxgrad_soft_thresholding, 2},
    {"_pRoxgrad_timesTwo", (DL_FUNC) &_pRoxgrad_timesTwo, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_pRoxgrad(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
